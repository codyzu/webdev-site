{"version":3,"sources":["index.js"],"names":["Button","props","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","type","className","style","width","onClick","buttonPressed","name","KeyRow","buttons","row","map","k","Object","assign","KeyPad","rows","keys","r","calculate","state","button","next","concat","current","operation","parseFloat","toString","ReactDOM","render","_useReducer","useReducer","_useReducer2","_home_cody_dev_tetras_react3_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","console","log","document","getElementById"],"mappings":"4KAUMA,qBAAS,SAACC,GAAD,OAAWC,EAAAC,EAAAC,cAAA,UACtBC,KAAK,SACLC,UAAU,iCACVC,MAAO,CAACC,MAAO,OACfC,QAAS,kBAAMR,EAAMS,cAAcT,EAAMU,QAEtCV,EAAMU,QAGPC,EAAS,SAACX,GACd,IAAMY,EAAUZ,EAAMa,IAAIC,IAAI,SAAAC,GAAC,OAAId,EAAAC,EAAAC,cAACJ,EAADiB,OAAAC,OAAA,CAAQP,KAAMK,GAAOf,MACxD,OAAOC,EAAAC,EAAAC,cAAA,WAAMS,IAGTM,EAAS,SAAClB,GACd,IAAMmB,EAAOnB,EAAMoB,KAAKN,IAAI,SAAAO,GAAC,OAAIpB,EAAAC,EAAAC,cAACQ,EAADK,OAAAC,OAAA,CAAQJ,IAAKQ,GAAOrB,MACrD,OAAOC,EAAAC,EAAAC,cAAA,WAAMgB,IAGf,SAASG,EAAUC,EAAOC,GACxB,OAAOA,GACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IAGH,MAAO,CACLC,KAAI,GAAAC,OAAKH,EAAME,MAAQ,IAAnBC,OAAwBF,GAC5BG,QAASJ,EAAMI,QACfC,UAAWL,EAAMK,WAIrB,IAAK,IACL,IAAK,IACH,MAAO,CACLD,QAASJ,EAAME,MAAQ,IACvBA,KAAM,KACNG,UAAWJ,GAEf,IAAK,IAGH,GAAwB,MAApBD,EAAMK,WAAyC,MAApBL,EAAMK,UAAmB,CACtD,IAAMH,EAAOI,WAAWN,EAAME,MACxBE,EAAUE,WAAWN,EAAMI,SACjC,MAAO,CACLF,KAAM,KACNE,QAA6B,MAApBJ,EAAMK,WAAqBD,EAAUF,GAAMK,YAAcH,EAAUF,GAAMK,WAClFF,UAAW,MAIf,OAAOL,EACT,IAAK,IAEH,MAAO,CACLI,QAAS,IACTF,KAAM,KACNG,UAAW,MAEf,QAEE,OAAOL,GA+BbQ,IAASC,OACP/B,EAAAC,EAAAC,cA3BiB,WAAM,IAAA8B,EACQC,qBAAWZ,EAAW,CAACK,QAAS,IAAKF,KAAM,KAAMG,UAAW,OADpEO,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAChBV,EADgBY,EAAA,GACT1B,EADS0B,EAAA,GAEvBE,QAAQC,IAAIf,GAQZ,OACEtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAD,CAAQE,KARC,CACX,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,MAIgBX,cAAeA,IACnCR,EAAAC,EAAAC,cAAA,UAAKoB,EAAME,MAAQF,EAAMI,WAc7B,MACAY,SAASC,eAAe","file":"static/js/main.332a65b9.chunk.js","sourcesContent":["import React, {useState, useReducer} from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap';\nimport { parse } from 'ipaddr.js';\n\n// import Calculator from './Calculator2';\n\n// YOUR CODE HERE\n\nconst Button = (props) => <button\n    type=\"button\"\n    className='btn btn-outline-primary btn-lg'\n    style={{width: '3em'}}\n    onClick={() => props.buttonPressed(props.name)}\n  >\n      {props.name}\n  </button>\n\nconst KeyRow = (props) => {\n  const buttons = props.row.map(k => <Button name={k} {...props} />);\n  return <div>{buttons}</div>;\n}\n\nconst KeyPad = (props) => {\n  const rows = props.keys.map(r => <KeyRow row={r} {...props} />);\n  return <div>{rows}</div>;\n}\n\nfunction calculate(state, button) {\n  switch(button) {\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n    case '0':\n      // TODO: RETURN THE MODIFIED STATE\n\n      return {\n        next: `${state.next || ''}${button}`,\n        current: state.current,\n        operation: state.operation,\n      };\n      // return {current, next, operation};\n      // return state\n    case '+':\n    case '-':\n      return {\n        current: state.next || '0',\n        next: null,\n        operation: button,\n      }\n    case '=':\n      // TODO: PERFORM THE CALCULATION AND RETURN THE MODIFIED STATE\n\n      if (state.operation === '+' || state.operation === '-') {\n        const next = parseFloat(state.next);\n        const current = parseFloat(state.current);\n        return {\n          next: null,\n          current: state.operation === '+' ? (current + next).toString() : (current - next).toString(),\n          operation: null,\n        }\n      }\n\n      return state;\n    case 'C':\n      // When C is pressed, we reset the state\n      return {\n        current: '0',\n        next: null,\n        operation: null,\n      }\n    default:\n      // If a button occurred that we did not expect, don't change anything\n      return state;\n  }\n}\n\n\nconst Calculator = () => {\n  const [state, buttonPressed] = useReducer(calculate, {current: '0', next: null, operation: null});\n  console.log(state);  // Log the state for debugging\n\n  const keys = [\n    ['1', '2', '3', '+'],\n    ['4', '5', '6', '-'],\n    ['7', '8', '9', '='],\n    ['C', '0']\n  ];\n  return ( \n    <div>\n      <KeyPad keys={keys} buttonPressed={buttonPressed} />\n      <h1>{state.next || state.current}</h1>\n    </div>\n  );\n}\n\n// ReactDOM.render(\n//   <KeyPad keys={[['1', '2', '3'], ['4', '5', '6']]}/>,\n//   document.getElementById('root')\n// );\n// ReactDOM.render(\n//   <KeyRow keys={['1', '2', '3']}/>,\n//   document.getElementById('root')\n// );\nReactDOM.render(\n  <Calculator />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}